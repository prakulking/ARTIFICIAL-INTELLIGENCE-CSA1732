import heapq

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])  # Manhattan distance

def a_star(graph, start, goal):
    # Priority queue to hold nodes to explore, starting with the start node
    open_set = []
    heapq.heappush(open_set, (0, start))
    
    # Dictionary to store the cost of getting to each node
    g_score = {start: 0}
    
    # Dictionary to store the estimated cost from start to goal through each node
    f_score = {start: heuristic(start, goal)}
    
    # Dictionary to reconstruct the path
    came_from = {}
    
    while open_set:
        # Get the node with the lowest estimated cost to the goal
        current = heapq.heappop(open_set)[1]
        
        # If we have reached the goal, reconstruct and return the path
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]  # Return reversed path
        
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))
    
    return None  # Return None if no path is found

# Example usage
if __name__ == '__main__':
    # Example graph represented as an adjacency list with distances
    graph = {
        (0, 0): {(0, 1): 1, (1, 0): 1},
        (0, 1): {(0, 0): 1, (1, 1): 1},
        (1, 0): {(0, 0): 1, (1, 1): 1},
        (1, 1): {(0, 1): 1, (1, 0): 1, (2, 2): 1},
        (2, 2): {(1, 1): 1}
    }
    
    start_node = (0, 0)
    goal_node = (2, 2)
    path = a_star(graph, start_node, goal_node)
    print(f"Path from {start_node} to {goal_node}: {path}")
