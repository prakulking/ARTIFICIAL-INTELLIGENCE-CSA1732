N = 8

# Function to print the chessboard
def print_solution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=' ')
        print()

# Function to check if a queen can be placed on board[row][col]
def is_safe(board, row, col):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False
    
    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check lower diagonal on left side
    for i, j in zip(range(row, N), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    return True

# Recursive function to solve the N-Queens problem using backtracking
def solve_n_queens(board, col):
    # Base case: If all queens are placed then return true
    if col >= N:
        return True
    
    # Consider this column and try placing this queen in all rows one by one
    for i in range(N):
        if is_safe(board, i, col):
            # Place this queen in board[i][col]
            board[i][col] = 1
            
            # Recur to place rest of the queens
            if solve_n_queens(board, col + 1):
                return True
            
            # If placing queen in board[i][col] doesn't lead to a solution, then remove queen from board[i][col]
            board[i][col] = 0
    
    # If the queen cannot be placed in any row in this column col, then return false
    return False

def solve_8_queens():
    board = [[0] * N for _ in range(N)]

    if not solve_n_queens(board, 0):
        print("Solution does not exist")
        return False
    
    print_solution(board)
    return True

# Solve the 8-Queens problem
solve_8_queens()
