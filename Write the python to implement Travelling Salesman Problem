import itertools

def calculate_distance(graph, path):
    return sum(graph[path[i]][path[i + 1]] for i in range(len(path) - 1)) + graph[path[-1]][path[0]]

def travelling_salesman(graph):
    nodes = list(graph.keys())
    min_path = None
    min_distance = float('inf')
    
    for perm in itertools.permutations(nodes):
        current_distance = calculate_distance(graph, perm)
        if current_distance < min_distance:
            min_distance = current_distance
            min_path = perm
    
    return min_path, min_distance

# Example usage
if __name__ == '__main__':
    # Example graph represented as an adjacency matrix (dictionary of dictionaries)
    graph = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }
    
    path, distance = travelling_salesman(graph)
    print(f"Optimal path: {path}")
    print(f"Minimum distance: {distance}")
